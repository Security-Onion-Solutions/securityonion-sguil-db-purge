Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 securityonion-sguil-db-purge (20120722-0ubuntu0securityonion8) precise; urgency=low
 .
   * Issue 406: sguil-db-purge needs to purge history table as well
   * Issue 428: sguil-db-purge should check for existence of tables
Author: Doug Burks <doug.burks@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- securityonion-sguil-db-purge-20120722.orig/bin/sguil-db-purge
+++ securityonion-sguil-db-purge-20120722/bin/sguil-db-purge
@@ -60,20 +60,27 @@ echo "Repair policy set to $DAYSTOREPAIR
 # Define a cleanup function
 cleanup() {
 
+	# Purge the history table
+        /usr/bin/mysql -u$DB_USER $PASSWORD_OPTION -BN -e "DELETE FROM history WHERE timestamp < DATE_SUB(NOW(), INTERVAL $DAYSTOKEEP DAY);" -D $DATABASE
+
+	# Purge the remaining tables
         for TABLEPREFIX in "data" "event" "icmphdr" "sancp" "tcphdr" "udphdr"
         do
-                /usr/bin/mysql -u$DB_USER $PASSWORD_OPTION -BN -e "DROP TABLE $TABLEPREFIX;" -D $DATABASE
-                TABLES=(`/usr/bin/mysql -u$DB_USER $PASSWORD_OPTION -BN -e "SHOW TABLES LIKE '$TABLEPREFIX%';" -D $DATABASE`)
-                for TABLE in "${TABLES[@]}"
-                do
-                        TABLEDAY=`echo "$TABLE" | awk -F_ '{print($3)}'`
-                        if [ "$TABLEDAY" -lt "$KEEPDAY" ]
-                        then
-                                /usr/bin/mysql -u$DB_USER $PASSWORD_OPTION -BN -e "DROP TABLE \`$TABLE\`;" -D $DATABASE
-                        else
-                                [ "$TABLEDAY" -gt "$REPAIRDAY" ] && /usr/bin/mysql -u$DB_USER $PASSWORD_OPTION -BN -e "REPAIR TABLE \`$TABLE\`;" -D $DATABASE
-                        fi
-                done
+		# Check to see if the table exists
+		mysql -u$DB_USER -D $DATABASE -e "SHOW TABLES LIKE '$TABLEPREFIX%';" | if grep $TABLEPREFIX >/dev/null 2>&1; then
+			# If the table exists, drop the merge table, delete the old tables, and repair the recent tables
+			echo "$TABLEPREFIX table exists, dropping old tables and repairing recent tables."
+	                /usr/bin/mysql -u$DB_USER $PASSWORD_OPTION -BN -e "DROP TABLE $TABLEPREFIX;" -D $DATABASE
+        	        TABLES=(`/usr/bin/mysql -u$DB_USER $PASSWORD_OPTION -BN -e "SHOW TABLES LIKE '$TABLEPREFIX%';" -D $DATABASE`)
+                	for TABLE in "${TABLES[@]}"; do
+                        	TABLEDAY=`echo "$TABLE" | awk -F_ '{print($3)}'`
+                       		if [ "$TABLEDAY" -lt "$KEEPDAY" ]; then
+	                                /usr/bin/mysql -u$DB_USER $PASSWORD_OPTION -BN -e "DROP TABLE \`$TABLE\`;" -D $DATABASE
+        	                else
+                	                [ "$TABLEDAY" -gt "$REPAIRDAY" ] && /usr/bin/mysql -u$DB_USER $PASSWORD_OPTION -BN -e "REPAIR TABLE \`$TABLE\`;" -D $DATABASE
+                        	fi
+                	done
+		fi
         done
 
 }
